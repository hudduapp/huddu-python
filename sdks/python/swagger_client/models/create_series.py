# coding: utf-8

"""
    FastAPI

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateSeries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'dashboard': 'str',
        'description': 'str',
        'meta': 'object'
    }

    attribute_map = {
        'name': 'name',
        'dashboard': 'dashboard',
        'description': 'description',
        'meta': 'meta'
    }

    def __init__(self, name=None, dashboard=None, description=None, meta=None):  # noqa: E501
        """CreateSeries - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._dashboard = None
        self._description = None
        self._meta = None
        self.discriminator = None
        self.name = name
        self.dashboard = dashboard
        if description is not None:
            self.description = description
        if meta is not None:
            self.meta = meta

    @property
    def name(self):
        """Gets the name of this CreateSeries.  # noqa: E501


        :return: The name of this CreateSeries.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateSeries.


        :param name: The name of this CreateSeries.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def dashboard(self):
        """Gets the dashboard of this CreateSeries.  # noqa: E501


        :return: The dashboard of this CreateSeries.  # noqa: E501
        :rtype: str
        """
        return self._dashboard

    @dashboard.setter
    def dashboard(self, dashboard):
        """Sets the dashboard of this CreateSeries.


        :param dashboard: The dashboard of this CreateSeries.  # noqa: E501
        :type: str
        """
        if dashboard is None:
            raise ValueError("Invalid value for `dashboard`, must not be `None`")  # noqa: E501

        self._dashboard = dashboard

    @property
    def description(self):
        """Gets the description of this CreateSeries.  # noqa: E501


        :return: The description of this CreateSeries.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateSeries.


        :param description: The description of this CreateSeries.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def meta(self):
        """Gets the meta of this CreateSeries.  # noqa: E501


        :return: The meta of this CreateSeries.  # noqa: E501
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this CreateSeries.


        :param meta: The meta of this CreateSeries.  # noqa: E501
        :type: object
        """

        self._meta = meta

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateSeries, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateSeries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
