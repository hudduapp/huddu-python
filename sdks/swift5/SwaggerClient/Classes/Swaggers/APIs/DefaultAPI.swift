//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Create Dashboard

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createDashboardDashboardsPost(body: CreateDashboard, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createDashboardDashboardsPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Dashboard
     - POST /dashboards
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func createDashboardDashboardsPostWithRequestBuilder(body: CreateDashboard) -> RequestBuilder<Void> {
        let path = "/dashboards"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Create Entry

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createEntryEntriesPost(body: CreateEntry, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        createEntryEntriesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Create Entry
     - POST /entries

     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func createEntryEntriesPostWithRequestBuilder(body: CreateEntry) -> RequestBuilder<Void> {
        let path = "/entries"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     New Series

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func newSeriesSeriesPost(body: CreateSeries, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        newSeriesSeriesPostWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     New Series
     - POST /series
     - 

     - examples: [{contentType=application/json, example=""}]
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func newSeriesSeriesPostWithRequestBuilder(body: CreateSeries) -> RequestBuilder<Void> {
        let path = "/series"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
